{"version":3,"sources":["components/ContactForm.js","components/ContactsList.js","components/Filter.js","components/Notification.js","services/contacts.js","App.js","index.js"],"names":["ContactForm","_ref","addContact","newName","handleNameChange","newNumber","handleNumberChange","react_default","a","createElement","className","onSubmit","value","onChange","type","ContactsList","contacts","handleDeleteClick","Fragment","map","contact","key","id","name","number","onClick","Filter","filter","handleFilterChange","filterResult","result","Notification","errorMessage","successMessage","notificationClass","baseUrl","services_contacts","axios","get","then","response","data","newContact","post","delete","concat","changedContact","put","App","_useState","useState","_useState2","Object","slicedToArray","setContacts","_useState3","_useState4","setNewName","_useState5","_useState6","setNewNumber","_useState7","_useState8","setFilter","_useState9","_useState10","setNewFilterResult","_useState11","_useState12","setSuccessMessage","_useState13","_useState14","setErrorMessage","useEffect","contactService","components_Notification","components_Filter","event","filterInput","target","re","RegExp","match","components_ContactForm","preventDefault","find","window","confirm","objectSpread","updatedContact","setTimeout","catch","error","message","contactObject","length","returnedContact","components_ContactsList","ReactDOM","render","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.b874a90c.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst ContactForm = ({addContact, newName, handleNameChange, newNumber, handleNumberChange}) => {\r\n    return (\r\n        <div className='form-container'>\r\n              <form onSubmit={addContact}>\r\n                <div>\r\n                    name: <input value={newName} onChange={handleNameChange}/>\r\n                </div>\r\n                <div>\r\n                    number: <input value={newNumber} onChange={handleNumberChange}/>\r\n                </div>\r\n                <div>\r\n                    <button type='submit'>add contact</button>\r\n                </div>\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ContactForm;","import React from 'react';\r\n\r\nconst ContactsList = ({contacts, handleDeleteClick}) => {\r\n    const rows = () => contacts.map(contact => {\r\n        return (\r\n            <div key={contact.id} className='list-item-container'>\r\n                <li>{contact.name} {contact.number}</li>\r\n                <button onClick={() => handleDeleteClick(contact.id)}>delete</button>\r\n            </div>\r\n        )\r\n    })\r\n\r\n    return (\r\n        <>\r\n            <h2>Contacts</h2>\r\n            <div>\r\n                <ul>\r\n                    {rows()}\r\n                </ul>\r\n            </div>\r\n        </>\r\n    )\r\n    \r\n}\r\n\r\nexport default ContactsList;","import React from 'react';\r\n\r\nconst Filter = ({filter, handleFilterChange, filterResult}) => {\r\n    const searchResultRows = () => {\r\n        if (filter === '') {\r\n            // if search input is empty, clear the searchResultRows\r\n            return <div></div>\r\n        }\r\n\r\n        return filterResult.map(result => \r\n            <li key={result.name}>{result.name} {result.number}</li>)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            search by name: <input value={filter} onChange={handleFilterChange}/>\r\n            <ul>\r\n                {searchResultRows()}\r\n            </ul>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Filter;","import React from 'react';\r\n\r\nconst Notification = ({errorMessage, successMessage}) => {\r\n    if (errorMessage === null && successMessage === null) {\r\n        return null\r\n    }\r\n\r\n    const notificationClass = errorMessage === null ? 'success-message' : 'error-message'\r\n\r\n    if (errorMessage !== null && successMessage === null) {\r\n        return (\r\n            <div className={notificationClass}>\r\n                {errorMessage}\r\n            </div>\r\n        )\r\n    }\r\n    \r\n    return (\r\n        <div className={notificationClass}>\r\n            {successMessage}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Notification","import axios from 'axios';\r\nconst baseUrl = '/api/persons';\r\n\r\nconst getAll = () => {\r\n    const request = axios.get(baseUrl)\r\n    return request.then(response => response.data)\r\n}\r\n\r\nconst create = newContact => {\r\n    const request = axios.post(baseUrl, newContact)\r\n    return request.then(response => response.data)\r\n}\r\n\r\nconst drop = id => {\r\n    const request = axios.delete(`${baseUrl}/${id}`)\r\n    return request.then(response => response.data)\r\n}\r\n\r\nconst update = (id, changedContact) => {\r\n    const request = axios.put(`${baseUrl}/${id}`, changedContact)\r\n    return request.then(response => response.data)\r\n}\r\n\r\nexport default {\r\n    getAll,\r\n    create,\r\n    drop,\r\n    update\r\n}","import React, { useState, useEffect } from 'react';\r\nimport ContactForm from './components/ContactForm';\r\nimport ContactsList from './components/ContactsList';\r\nimport Filter from './components/Filter';\r\nimport Notification from './components/Notification';\r\nimport contactService from './services/contacts'\r\n\r\nconst App = () => {\r\n    const [contacts, setContacts] = useState([])\r\n    const [newName, setNewName] = useState('')\r\n    const [newNumber, setNewNumber] = useState('')\r\n    const [filter, setFilter] = useState('')\r\n    const [filterResult, setNewFilterResult] = useState([])\r\n    const [successMessage, setSuccessMessage] = useState(null)\r\n    const [errorMessage, setErrorMessage] = useState(null)\r\n\r\n    useEffect(() => {\r\n        contactService\r\n            .getAll()\r\n            .then(contacts => setContacts(contacts))\r\n    }, [])\r\n\r\n    const handleNameChange = (event) => {\r\n        setNewName(event.target.value)\r\n    }\r\n\r\n    const handleNumberChange = (event) => {\r\n        setNewNumber(event.target.value)\r\n    }\r\n\r\n    const handleFilterChange = (event) => {\r\n        let filterInput = event.target.value\r\n        setFilter(filterInput)\r\n        let re = new RegExp(`${filterInput}`, 'gi')\r\n\r\n        setNewFilterResult(contacts.filter(contact => {\r\n            return contact.name.match(re)\r\n        }))\r\n    }\r\n\r\n    const handleDeleteClick = id => {\r\n        const contact = contacts.find(contact => contact.id === id)\r\n\r\n        if (window.confirm(`Delete contact information for ${contact.name}?`)) {\r\n            contactService\r\n                .drop(id)\r\n                .then(response => {\r\n                    setContacts(contacts.filter(contact => contact.id !== id))\r\n                    setSuccessMessage(`Contact information for ${contact.name} deleted successfully.`)\r\n                    setTimeout(() => {\r\n                        setSuccessMessage(null)\r\n                    }, 5000)\r\n            })\r\n            .catch(error => {\r\n                setErrorMessage(`Request failed with an error message: ${error.message}`)\r\n                setTimeout(() => {\r\n                    setErrorMessage(null)\r\n                }, 5000)\r\n            })\r\n        } \r\n    }\r\n\r\n    const addContact = (event) => {\r\n        event.preventDefault()\r\n        const contact = contacts.find(contact => contact.name === newName)\r\n\r\n        if (contact) {\r\n            if (window.confirm(`Update contact information for ${contact.name}?`)) {\r\n                const id = contact.id\r\n                const changedContact = {...contact, number: newNumber}\r\n                \r\n                contactService\r\n                    .update(id, changedContact)\r\n                    .then(updatedContact => {\r\n                        setContacts(contacts.map(contact => contact.id !== id ? contact : updatedContact))\r\n                        setSuccessMessage(`Contact information updated for ${updatedContact.name} successfully.`)\r\n                        setTimeout(() => {\r\n                            setSuccessMessage(null)\r\n                        }, 5000)\r\n                    })\r\n                    .catch(error => {\r\n                        setErrorMessage(`Update failed with message: ${error.message}`)\r\n                        setTimeout(() => {\r\n                            setErrorMessage(null)\r\n                        }, 5000)\r\n                        setContacts(contacts.filter(contact => contact.id !== id))\r\n                    })\r\n            }\r\n        } else {\r\n            const contactObject = {\r\n                name: newName,\r\n                number: newNumber,\r\n                id: contacts.length + 1\r\n            }\r\n    \r\n            contactService\r\n                .create(contactObject).then(returnedContact => {\r\n                    setContacts(contacts.concat(returnedContact))\r\n                    setNewName('')\r\n                    setNewNumber('')\r\n                    setSuccessMessage(`New Contact added: ${returnedContact.name}.`)\r\n                    setTimeout(() => {\r\n                        setSuccessMessage(null)\r\n                    },  5000)\r\n                })\r\n                .catch(error => {\r\n                    setErrorMessage(`Creation failed with message: ${error.response.data.error}`)\r\n                    setTimeout(() => {\r\n                        setErrorMessage(null)\r\n                    }, 5000)\r\n            })\r\n        }\r\n    }\r\n\r\n  return (\r\n    <>\r\n        <h2>Phonebook</h2>\r\n        <Notification \r\n            errorMessage={errorMessage} \r\n            successMessage={successMessage}\r\n        />\r\n        <Filter \r\n            filter={filter} \r\n            handleFilterChange={handleFilterChange}\r\n            filterResult={filterResult}\r\n        />\r\n        <ContactForm \r\n            addContact={addContact}\r\n            newName={newName}\r\n            handleNameChange={handleNameChange} \r\n            newNumber={newNumber} \r\n            handleNumberChange={handleNumberChange}\r\n        />\r\n        <ContactsList \r\n            contacts={contacts}\r\n            handleDeleteClick={handleDeleteClick}/>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n"],"sourceRoot":""}